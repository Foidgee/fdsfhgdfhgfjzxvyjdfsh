local game = game
local Chat = game:GetService("Chat")
local channel = game.TextChatService:WaitForChild("TextChannels"):WaitForChild("RBXGeneral")

local Rayfield = loadstring(game:HttpGet('https://pastebin.com/raw/rhv71PZG'))()

local Window = Rayfield:CreateWindow({
   Name = "NeverTag.lol V1.0.6",
   Icon = 119132628394474, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "NeverTag.lol",
   LoadingSubtitle = "get rid of tags, NeverTag.",
   

   ToggleUIKeybind = "X", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "NeverTag"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "k7DyzvmGga", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to true to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "NeverTag.lol",
      Subtitle = "Key System",
      Note = "Join to get key discord.gg/k7DyzvmGga", -- Use this to tell the user how to get a key
      FileName = "Login", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"bestever","niggathisniggathat"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local method1 = {
    ["fuck"] = "fⴎϲҟ",
    ["fucks"] = "fⴎϲҟธ",
    ["fak"] = "fสҟ",
    ["fuckass"] = "fⴎϲҟสss",
    ["marijuana"] = "mสrเ่juสnส",
    ["watchpeopledie"] = "wสtchpeopIedเ่e",
    ["shit"] = "shเ่t",
    ["shits"] = "shเ่ts",
    ["shitting"] = "shเ่ttiฑg",
    ["shitted"] = "shเ่tted",
    ["bullshit"] = "ხuIIshเ่t",
    ["pussies"] = "puธธieธ",
    ["pedophiles"] = "pedჿphเ่Ieธ",
    ["pedophile"] = "pedჿphเ่Ie",
    ["zoophile"] = "zჿჿphเ่Ie",
    ["pussys"] = "pⴎssⴘs",
    ["bullshitting"] = "ხuIIshเ่ttiฑg",
    ["nigga"] = "ฑiggส",
    ["nigger"] = "ฑiggeꞅ",
    ["nig"] = "ฑig",
    ["deadniggers"] = "deสdฑiggeꞅธ",
    ["negro"] = "negꞅo",
    ["negros"] = "negꞅoธ",
    ["porn"] = "porฑ",
    ["porno"] = "porฑo",
    ["pornography"] = "porฑogrสphy",
    ["sex"] = "ธex",
    ["fuckers"] = "fⴎϲҟeꞅธ",
    ["fucker"] = "fⴎϲҟeꞅ",
    ["fucked"] = "fⴎϲҟed",
    ["fucklard"] = "fⴎϲҟIสrd",
    ["fuckie"] = "fⴎϲҟเ่e",
    ["discord"] = "dเ่ธϲoꞅd",
    ["niggas"] = "ฑiggสธ",
    ["niggers"] = "ฑiggeꞅธ",
    ["sexy"] = "ธexy",
    ["slave"] = "sIสve",
    ["rape"] = "rสpe",
    ["raper"] = "rสpeꞅ",
    ["rapist"] = "ꞅapiธt",
    ["kys"] = "kyธ",
    ["jerking"] = "jeꞅkiฑg",
    ["jerks"] = "jeꞅkธ",
    ["jerk"] = "jeꞅk",
    ["instagram"] = "iฑstสgrสm",
    ["gay"] = "gสy",
    ["gays"] = "gสys",
    ["cock"] = "ͼoͼҟ",
    ["cocksucker"] = "ͼoͼҟธⴎckeꞅ",
    ["cocksucking"] = "ͼoͼҟธⴎckiฑg",
    ["fucking"] = "fⴎϲҟiฑg",
    ["anal"] = "สnสI",
    ["boobs"] = "ხooხธ",
    ["boobies"] = "ხooხieธ",
    ["titties"] = "tเ่ttเ่eธ",
    ["tits"] = "tเ่tธ",
    ["hentai"] = "heฑtaเ่",
    ["love"] = "Ioꜗve",
    ["loves"] = "Ioꜗves",
    ["loving"] = "Ioꜗving",
    ["ass"] = "สss",
    ["fatass"] = "fสtสss",
    ["deadass"] = "deสdสss",
    ["motherfucker"] = "mჿtheꞅfⴎϲҟeꞅ",
    ["gf"] = "gfׂׂׂׂׂׂׂׂ",
    ["girlfriend"] = "giꞅIfrเ่end",
    ["bf"] = "bfׂׂׂׂׂׂׂׂ",
    ["boyfriend"] = "ხoyfrเ่end",
    ["gays"] = "gสys",
    ["pornhub"] = "porฑhⴎb",
    ["shitty"] = "shเ่tty",
    ["robux"] = "rჿbux",
    ["nazi"] = "naⴭi", 
    ["adolf"] = "สdolf",
    ["hitler"] = "hitIeꞅ",
    ["bitch"] = "ხเ่tϲh",
    ["bitchs"] = "ხเ่tϲhธ",
    ["youtube"] = "yoⴎtⴎbe",
    ["lmao"] = "Imao",
    ["lmfao"] = "Imfสo",
    ["dick"] = "dเ่ϲҟ",
    ["fag"] = "fสg",
    ["fags"] = "fสgs",
    ["faggot"] = "fสggot",
    ["faggots"] = "fสggotธ",
    ["faggoted"] = "fสggoted",
    ["pussy"] = "pⴎssⴘ",
    ["retard"] = "ꞅetaꞅd",
    ["retards"] = "ꞅetaꞅdธ",
    ["retarded"] = "ꞅetสꞅded",
    ["slut"] = "sIⴎt",
    ["hell"] = "heII",
    ["esex"] = "eธex",
    ["kill"] = "kiII",
    ["killing"] = "kiIIiฑg",
    ["yourself"] = "yoⴎꞅseIf",
    ["himself"] = "hเ่mseIf",
    ["myself"] = "myธeIf",
    ["raping"] = "ꞅapiฑg",
    ["rapes"] = "rสpes",
    ["raped"] = "rสped",
    ["erection"] = "eꞅection",
    ["penis"] = "peฑเ่ธ",
    ["bulk"] = "buIk",
    ["lemme"] = "Iemme",
    ["talking"] = "taIking",
    ["volume"] = "voIume",
    ["already"] = "aIready",
    ["dumass"] = "dⴎmสss",
    ["dumbass"] = "dumხสss",
    ["cliff"] = "cIiff",
    ["asshole"] = "สธธhჿIe",
    ["asshoe"] = "สธธhჿe",
    ["hoe"] = "hჿe",
    ["fentanyl"] = "fentanyI",
    ["heil"] = "heเ่I",
    ["imbecile"] = "imbeciIe",
    ["holy"] = "hoIy",
    ["black"] = "ხIสϲҟ",
    ["white"] = "whเ่te",
    ["racist"] = "ꞅสϲเ่ธt",
    ["baby"] = "bสby",
    ["babe"] = "bสbe",
    ["cocaine"] = "ϲoϲaiฑe",
    ["whore"] = "whჿꞅe",
    ["cums"] = "cⴎmธ",
    ["cum"] = "cⴎm",
    ["cumming"] = "cⴎmmiฑg",
    ["cummed"] = "cⴎmmed",
    ["alot"] = "aIot",
    ["bitches"] = "ხเ่tϲheธ",
    ["stfu"] = "stfⴎ",
    ["shitskinned"] = "ธhitskiฑฑed",
    ["pmo"] = "pmჿ",
    ["wtf"] = "wtfׂׂׂׂׂׂׂׂ",
    ["idgaf"] = "idgสf",
    ["my"] = "mꜗy",
    ["u"] = "ⴎ",
    ["ur"] = "uꞅ",
    ["your"] = "youꞅ",
    ["yours"] = "youꞅธ",
    ["wanna"] = "wสnnส",
    ["have"] = "hสve",
    ["having"] = "hสviฑg",
    ["lgbt"] = "Igbt",
    ["brutally"] = "brutaIIy",
    ["lol"] = "IoI",
    ["blackie"] = "ხIสckie",
    ["is"] = "เ่s",
    ["pox"] = "pჿx",
    ["this"] = "thเ่s",
    ["should"] = "shouId",
    ["hate"] = "hสτe",
    ["did"] = "dเ่d",
    ["off"] = "ჿff",
    ["cant"] = "cสnt",
    ["with"] = "wเ่th",
    ["who"] = "whჿ",
    ["eat"] = "eสt",
    ["eats"] = "eสtธ",
    ["skid"] = "skเ่d",
    ["kid"] = "kเ่d",
    ["like"] = "Iike",
    ["speak"] = "speสk",
    ["stupid"] = "stⴎpid",
    ["slides"] = "sIides",
    ["lost"] = "Iost",
    ["sledgehammer"] = "sIedgehammer",
    ["video"] = "vเ่deo",
    ["public"] = "pubIic",
    ["jungle"] = "jungIe",
    ["big"] = "bเ่g",
    ["small"] = "smaII",
    ["built"] = "buiIt",
    ["lame"] = "Iame",
    ["anyone"] = "สnyone",
    ["every"] = "eveꞅy",
    ["wants"] = "wสntธ",
    ["whoever"] = "whჿeveꞅ",
    ["also"] = "aIso",
    ["whats"] = "whสtธ",
    ["yo"] = "yჿ",
    ["can"] = "cสn",
    ["all"] = "aII",
    ["rbxassetid"] = "ꞅbxสssetid",
    ["rule"] = "ꞅⴎIe",
    ["shut"] = "shⴎt",
    ["monkey"] = "mჿฑҟey",
    ["girl"] = "giꞅI",
    ["girls"] = "giꞅIธ",
    ["suicide"] = "suเ่ϲเ่de",
    ["suicides"] = "suเ่ϲเ่deธ",
    ["im"] = "เ่m",
    ["iam"] = "iสm",
    ["in"] = "เ่n",
    ["children"] = "ϲhเ่Idꞅen",
    ["you"] = "yoⴎ",
    ["are"] = "aꞅe",
    ["had"] = "hสd",
    ["want"] = "wสnt",
    ["wants"] = "wสntธ",
    ["all"] = "aII",
    ["mommy"] = "mჿmmy",
    ["mama"] = "mสmส",
    ["mom"] = "mჿm",
    ["moms"] = "mჿmธ",
    ["daddy"] = "dสddy",
    ["dads"] = "dสdธ",
    ["killed"] = "kiIIed",
    ["kills"] = "kiIIs",
    ["dude"] = "dⴎde",
    ["gay"] = "gสy",
    ["gays"] = "gสys",
    ["down"] = "dჿwn",
    ["will"] = "wเ่II",
    ["squirt"] = "squiꞅt",
    ["burn"] = "buꞅn",
    ["user"] = "ⴎseꞅ",
    ["users"] = "ⴎseꞅธ",
    ["add"] = "สdd",
    ["suck"] = "ธⴎck",
    ["sucks"] = "ธⴎckธ",
    ["sucker"] = "ธⴎckeꞅ",
    ["sucking"] = "ธⴎckiฑg",
    ["lick"] = "Iick",
    ["licks"] = "Iickธ",
    ["licking"] = "Iickiฑg",
    ["dirty"] = "dเ่ꞅty",
    ["from"] = "fꞅom",
    ["top"] = "ṭop",
    ["wow"] = "wჿw",
    ["color"] = "cჿIჿr",
    ["paint"] = "pสint",
    ["nice"] = "nเ่ce",
    ["child"] = "ϲhเ่Id",
    ["public"] = "pubIic",
    ["put"] = "pⴎt",
    ["puts"] = "pⴎts",
    ["dildo"] = "dเ่Idჿ",
    ["obama"] = "obสmส",
    ["dih"] = "dเ่h",
    ["dihh"] = "dเ่hh",
    ["dihhh"] = "dเ่hhh",
    ["dihhhh"] = "dเ่hhhh",
    ["dihhhhh"] = "dเ่hhhhh",
    ["dihhhhhh"] = "dเ่hhhhhh",
    ["dihhhhhhh"] = "dเ่hhhhhhh",
    ["dihhhhhhhh"] = "dเ่hhhhhhhh",
    ["dihhhhhhhhh"] = "dเ่hhhhhhhhh",
    ["dihhhhhhhhhh"] = "dเ่hhhhhhhhhh",
    ["just"] = "jⴎst",
    ["us"] = "ⴎs",
    ["damn"] = "dสmn",
    ["dam"] = "dสm",
    ["cunt"] = "cⴎฑt",
    ["prick"] = "prเ่ck",
    ["lemme"] = "Iemme",
    ["let"] = "Iet",
    ["master"] = "mสster",
    ["mastered"] = "mสsteꞅed",
    ["mastering"] = "mสsteriฑg",
    ["help"] = "heIp",
    ["helping"] = "heIpiฑg",
    ["show"] = "ธhow",
    ["showing"] = "ธhowiฑg",
    ["screen"] = "sϲꞅeen",
    ["deeper"] = "deepeꞅ",
    ["gg"] = "gꜗg",
    ["autistic"] = "aⴎtiธtiϲ",
    ["terrorist"] = "teꞅꞅoꞅiธt",
    ["hard"] = "hสrd",
    ["hardcode"] = "hสrdϲჿde",
    ["hardcore"] = "hสrdϲჿꞅe",
    ["and"] = "สnd",
    ["bored"] = "boꞅed",
    ["boring"] = "boꞅiฑg",
    ["k7DyzvmGga"] = "k7ꜗDyzvmGgꜗส",
    ["now"] = "nჿw",
    ["cracker"] = "cꞅackeꞅ",
    ["her"] = "heꞅ",
    ["he"] = "hꜗe",
    ["hes"] = "heธ",
    ["she"] = "ธhe",
    ["shes"] = "ธheธ",
    ["mine"] = "mเ่ne",
    ["bro"] = "bꞅo",
    ["anyways"] = "สnywสyธ",
    ["whats"] = "whสtธ",
    ["bye"] = "ხye",
    ["cya"] = "ϲya",
    ["again"] = "สgสin",
    ["nah"] = "nสh",
    ["wsp"] = "wธp",
    ["wsg"] = "wธg",
    ["shawty"] = "shสwty",
    ["cut"] = "cuṭ",
    ["hey"] = "heꜗy",
    ["gonna"] = "gჿnna",
    ["gotta"] = "goṭṭa",
    ["swallow"] = "swสIIow",
    ["how"] = "hჿw",
    ["about"] = "abouṭ",
    ["slice"] = "ธIice",
    ["but"] = "ხut",
    ["or"] = "oꞅ",
    ["prob"] = "pꞅob",
    ["problem"] = "pꞅobIem",
    ["tag"] = "ṭag",
    ["tags"] = "ṭags",
    ["hi"] = "hเ่",
    ["hello"] = "heIIo",
    ["the"] = "ṭhe",
    ["hell"] = "heII",
    ["to"] = "ṭo",
    ["too"] = "ṭoo",
    ["hey"] = "Һey",
    ["xd"] = "ӽd",
    ["go"] = "gჿ",
    ["goto"] = "goṭo",
    ["ok"] = "ჿk",
    ["what"] = "whaṭ",
    ["its"] = "iṭs",
    ["idk"] = "idҟ",
    ["idc"] = "idϲ",
    ["better"] = "beṭṭer",
    ["uhm"] = "uҺm",
    ["no"] = "nჿ",
    ["not"] = "noṭ",
    ["nsfw"] = "ฑธfw",
    ["rules"] = "ꞅⴎIeธ",
    ["post"] = "posṭ",
    ["bend"] = "beฑd",
    ["over"] = "oveꞅ",
    ["exploiters"] = "expIoiṭeꞅธ",
    ["exploit"] = "expIoiṭ",
    ["cheater"] = "cheaṭeꞅ",
    ["most"] = "mosṭ",
    ["important"] = "impoꞅṭanṭ",
    ["thing"] = "ṭhing",
    ["hang"] = "hสng",
    ["up"] = "ⴎp", 
    ["nut"] = "nⴎt",
    ["nuts"] = "nⴎtธ",
    ["on"] = "ჿn",
    ["ah"] = "สh",
    ["ahh"] = "สhh",
    ["gtfo"] = "gtfჿ",
    ["trans"] = "tꞅanธ",
    ["ashes"] = "aธheธ",
    ["woman"] = "womสn",
    ["come"] = "cჿme",
    ["doxxing"] = "dჿxxiฑg",
    ["someone"] = "sჿmeჿne",
    ["years"] = "yeสꞅธ",
    ["balls"] = "bสIIธ",
    ["ball"] = "bสII",
    ["finger"] = "fเ่ฑgeꞅ",
    ["fem"] = "ӻem",
    ["femboy"] = "ӻemხoy",
    ["yeah"] = "yeสh",
    ["diddy"] = "dเ่ddy",
    ["tuff"] = "ṭuff",
    ["back"] = "bสck",
    ["get"] = "geṭ",
    ["out"] = "ouṭ",
    ["0"] = "0ꜗ",
    ["1"] = "1ꜗ",
    ["2"] = "2ꜗ",
    ["3"] = "3ꜗ",
    ["4"] = "4ꜗ",
    ["5"] = "5ꜗ",
    ["6"] = "6ꜗ",
    ["7"] = "7ꜗ",
    ["8"] = "8ꜗ",
    ["9"] = "9ꜗ",
    [" "] = ""
}

local chars = "abcdefghijklmn¿"

local message = ""
local delay = ""

local function send(msg)
channel:SendAsync(msg)
end

local function fix()
local rs = ""
for i = 1, 20 do
local rand = math.random(1, #chars)
rs = rs .. chars:sub(rand, rand)
end
return rs
end

local function arab(msg, char)
local r = ""
for i = #msg, 1, -1 do
r = r .. char .. msg:sub(i, i)
end
return r
end

local function method2(text)
local charmotherfucker = {
  a = "ส", b = "ხ", c = "ͼ", d = "d", e = "e",
  f = "f", g = "g", h = "h", i = "เ่", j = "j",
  k = "ҟ", l = "I", m = "m", n = "ฑ", o = "ჿ",
  p = "p", q = "q", r = "ꞅ", s = "ธ", t = "ṭ",
  u = "ⴎ", v = "v", w = "w", x = "x", y = "y",
  z = "ⴭ"
}

local convertedText = ""

for i = 1, #text do
local char = text:sub(i, i)
local lowerChar = char:lower()
if charmotherfucker[lowerChar] then
if char == lowerChar then
convertedText = convertedText .. charmotherfucker[lowerChar]
else
convertedText = convertedText .. charmotherfucker[lowerChar]
end
else
convertedText = convertedText .. char
end
end

return convertedText
end

local HomeTab = Window:CreateTab("Home", "Home") -- Title, Image
local Tab = Window:CreateTab("Sentences", "Map") -- Title, Image
local Tab2 = Window:CreateTab("AutoBypasser", "flag") -- Title, Image

HomeTab:CreateParagraph({ Title = "Have fun using NeverTag", Content = "" })

HomeTab:CreateParagraph({ Title = "change your language to Қазақ тілі* for this script to work", Content = "" })

HomeTab:CreateParagraph({ Title = "This script may have bugs, report bugs in discord.gg/k7DyzvmGga", Content = "" })

HomeTab:CreateParagraph({ Title = "__________________________", Content = "" }) 

HomeTab:CreateButton({ Name = "Unban Vc", Callback = function() loadstring(game:HttpGet("https://pastebin.com/raw/WtvsKx0d"))() end }) 

Rayfield:Notify({
   Title = "Thanks For Using NeverTag! Enjoy.",
   Content = "Set Your Language (From Account Settings) To Қазақ тілі* For This To Work. Enjoy",
   Duration = 10,
   Image = 119132628394474,
})



local Button = Tab:CreateButton({
   Name = "go kys nigga",
   Callback = function()
   local bypassed = "gꜗokyธฑiggส"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "shut yo dumass up already",
   Callback = function()
   local bypassed = "shⴎtyꜗodⴎmสssⴎpaIready"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "u ain't tuff nigga stfu",
   Callback = function()
   local bypassed = "ⴎain'tṭuffฑiggสstfׂׂׂׂׂׂׂׂⴎ"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "i don't speak in tags faggot",
   Callback = function()
   local bypassed = "idon'tspeสkเ่nṭagsfสggot"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "nigga back off I'm not gay",
   Callback = function()
   local bypassed = "ฑiggสbสckofꜗfเ่mnoṭgสy"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "*eats ur pussy*",
   Callback = function()
   local bypassed = "*ׂׂׂׂׂׂׂׂeสtธⴎrpⴎssⴘ"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "I'm gonna eat that pussy",
   Callback = function()
   local bypassed = "เ่mgoฑฑaeสtthสtpⴎssⴘ"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "get that tail out off your ass",
   Callback = function()
   local bypassed = "geṭthสttailouṭofꜗfyoⴎrสss"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol", 
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "go swallow a glock 17 nigga",
   Callback = function()
   local bypassed = "gꜗoswสIIowagIock1ꜗ7ฑiggส"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})



local Button = Tab:CreateButton({
   Name = "shoot me nigga idc",
   Callback = function()
   local bypassed = "shootmeฑiggสidc"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({
   Name = "nigger i know u want kfc and watermelon",
   Callback = function()
   local bypassed = "ฑiggeriknowuwantkfcandwatermelon"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})


local Button = Tab:CreateButton({ 
   Name = "burning faggots live on camera challenge part 2!",
   Callback = function()
   local bypassed = "burningfสggotธliveoncamerachallengepart2!"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({ 
   Name = "*busts a nut*",
   Callback = function()
   local bypassed = "*bⴎstsanⴎt*"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({ 
   Name = "shoot a lgtbq parade and burn all the faggots",
   Callback = function()
   local bypassed = "shootalgtbqparadeandbⴎrnallthefสggotธ"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Button = Tab:CreateButton({ 
   Name = "first one to rape an LGTBQ activist gets korblox!🎉🥳🎁",
   Callback = function()
   local bypassed = "firstonetorสpeanLGTBQactivistgetskorblox!🎉🥳🎁"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})


local Button = Tab:CreateButton({ 
   Name = "im a real thug nigga from the hood!",
   Callback = function()
   local bypassed = "imarealthugฑiggสfromthehood!"
   local result = Chat:FilterStringForBroadcast(bypassed, game.Players.LocalPlayer)
   if result:match(bypassed) then
   channel:SendAsync(result)
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
    })
    else
   Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5, 
    Image = "x"
    })
   end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (cursive)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local guo = string.gsub(msgg, "%u", string.lower)
for word, replacement in pairs(method1) do
guo = guo:gsub("%f[%a]" .. word:lower() .. "%f[%A]", replacement)
end
local str = string.gsub(guo, "%d", method1)
local eou = string.gsub(str, "*", "*ׂׂׂׂׂׂׂׂ")
local euo = string.gsub(eou, "~", "~ׂׂׂׂׂׂׂׂ")
local stt = string.gsub(euo, "%s+", method1)

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=stt
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (cursive 2)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local resultnigga = method2(msgg)

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=resultnigga
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (ـ)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=arab(msgg, "ـ")
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (؍)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=arab(msgg, "؍")
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (؟)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=arab(msgg, "؟")
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Input = Tab2:CreateInput({
   Name = "Bypass (؛)",
   CurrentValue = "",
   PlaceholderText = "Message",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
local msgg = Text
local istagged = nil

local bypassedtxt=msgg
local resut = Chat:FilterStringForBroadcast(bypassedtxt, game.Players.LocalPlayer)
if resut:match(bypassedtxt) then
istagged = false
channel:SendAsync(resut)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
istagged = true
end

local bypassedtext=arab(msgg, "؛")
local result = Chat:FilterStringForBroadcast(bypassedtext, game.Players.LocalPlayer)
if istagged == true and not nil or false then
if result:match(bypassedtext) then
channel:SendAsync(result)
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message succesfully bypassed.",
    Duration = 5, 
    Image = "check"
})
else
Rayfield:Notify({
    Title = "NeverTag.lol",
    Content = "Message was tagged, try typing something similar.",
    Duration = 5,
    Image = "check"
})
end
end
   end,
})

local Button = Tab2:CreateButton({
   Name = "Fix tagging",
   Callback = function()
   local e = fix()
   send(e)
   end,
})

Tab2:CreateParagraph({ Title = "Use fix tagging if it starts to get tagged non-stop", Content = "" })
